## Community Cataloging

### Contact information
Questions? Comments? Contact ucla.ccing@gmail.com!

### About Community Cataloging

The goal of the Community Cataloging project is to help the UCLA Library catalog a large collection of foreign-language books that have not been processed due to a shortage of specialists in the library who are experts in the books' languages. By providing images of the books' title pages and in-publication data pages for transcription via the Zooniverse Scribe tool, the Community Cataloging site will enable language experts from the greater UCLA community to assist in the cataloging of these volumes. Community Cataloging also involves the use of advanced optical character recognition (OCR) software to help detect the languages used in particular books and to provide trial transcriptions of their title pages that human experts may then correct, tag, and verify.

This project involves tying together a couple off-the-shelf software components: Tesseract for OCR in multiple languages, and Scribe for crowdsourced image tagging and transcription. The expected workflow is as follows:
1. Photos are taken of the title pages and publication pages of the books; images are uploaded to a server
2. A script on the server run OCR on the books to identify text blocks on the cover and transcribe them
3. Using Scribe's web interface, language experts fix or approve the transcriptions and tag the text blocks as “title,” “author,” etc.
4. These tags and the OCR'd texts are automatically combined to make a library catalog record for the book, which can be imported into the library catalog system

The codebase is most likely Ruby on Rails, Node.js, Java, and MongoDB.

### About BuildUCLA
BuildUCLA is a software development program coordinated by the UCLA Library. As participants in BuildUCLA, groups of UCLA undergraduate and graduate students work in teams to develop software applications meant to enhance library collections and improve student experiences with the library.

### How Transcription Works

Many transcription projects deal with deciphering and typing free-flowing text from digitized pages (say, from letters or diaries). This project has a different focus. The goal here is to produce a _structured_ data set extracted from historical records that are themselves highly structured. This involves identifying key fields on the page and then transcribing the text from those fields. For complex, age-worn documents written in 19th century script, this is a tall order. So we've devised a division of labor.

In Community Cataloging, transcription is broken into three free-standing tasks: marking, transcribing, and verifying. These tasks follow a sequence of work, but they can be performed independently of one another. One person may prefer the **Mark** task: identifying fields on the page and drawing boxes around them. This work provides a structure for the document that facilitates transcription of marked fields in the **Transcribe** task. This task too can be done in isolation, benefiting from the clearly placed data entry fields provided by previous volunteers in the marking stage.

Lastly, there is the **Verify** task. This one is all about ensuring the quality of the work done by others in the mark and transcribe stages. To ensure quality output, every marked field will be transcribed by multiple volunteers. Our software runs an algorithm that looks for agreement among the transcriptions. If a field has been transcribed consistently by several users, it has reached "consensus" and is added to the final data set. If there are conflicting entries, those are queued up for the verification task, in which users can vote on the most accurate transcription and, if needed, add their own.

View the [Project Intro](http://emigrantcity.nypl.org/#/intro) for an illustrated guide to the **Emigrant City** task flow.


### About the Software
Our technology stack consists of the scribe-API, which is based on Ruby on Rails, along with a Java Spring backend that handles the OCR. The particularly useful aspect of scribe-API is that it provides a quick and easy way of transcribing text, which is why we chose this library.

### Team Members

* **Ankur Papneja**
* **Arko Dewri**
* **DaLarm Han**
* **Jasmine Kim**
* **Jeffrey Qiu**
* **Johnny Ho**
* **Kenta Onimura**
* **Matthew Lin**

### Special Thanks to our advisor Peter Broadwell!
